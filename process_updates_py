import json
import logging
from pathlib import Path
from datetime import datetime, timedelta
from auto_notion_sync import NotionSync, setup_logging
from dotenv import load_dotenv
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

class ClaudeProcessor:
    def __init__(self):
        self.driver = webdriver.Chrome()  # Make sure you have Chrome and chromedriver installed
        self.driver.get("https://claude.ai/chats")
        # Wait for user to log in manually first time
        input("Please log in to Claude and press Enter to continue...")

    def process_text(self, text, section):
        try:
            prompt = f"""You are helping to process and analyze personal notes.
The following note is from the section "{section}" of a personal dashboard:

{text}

Please analyze this note and provide:
1. A brief summary
2. Key insights or lessons learned
3. Suggested actions or next steps
4. Any patterns or connections to previous events (if applicable)

Format your response in a clear, structured way."""

            # Find and click new chat button
            new_chat_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'New chat')]"))
            )
            new_chat_button.click()

            # Find the input field and send the prompt
            input_field = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div[contenteditable='true']"))
            )
            input_field.send_keys(prompt)
            input_field.send_keys(Keys.RETURN)

            # Wait for response
            time.sleep(5)  # Initial wait
            last_response = ""
            while True:
                response_element = self.driver.find_elements(By.CSS_SELECTOR, "div.claude-response")[-1]
                current_response = response_element.text
                if current_response == last_response:
                    break
                last_response = current_response
                time.sleep(2)

            return last_response

        except Exception as e:
            logging.error(f"Error processing with Claude: {str(e)}")
            return f"Error processing note: {str(e)}"

    def __del__(self):
        if hasattr(self, 'driver'):
            self.driver.quit()

def process_updates_with_llm(updates_file):
    """Process updates using Claude via browser automation"""
    try:
        with open(updates_file, 'r', encoding='utf-8') as f:
            updates = json.load(f)
        
        processor = ClaudeProcessor()
        processed_updates = []
        
        for update in updates:
            section = update['section']
            content = "\n".join(update['new_content'])
            
            # Process with Claude
            processed_content = processor.process_text(content, section)
            
            # Format the final content
            final_content = f"\n--- AI Analysis ({datetime.now().strftime('%Y-%m-%d %H:%M')}) ---\n"
            final_content += processed_content
            final_content += f"\n\nOriginal Note:\n{content}"
            
            processed_updates.append({
                "section": section,
                "content": final_content
            })
        
        return processed_updates
        
    except Exception as e:
        logging.error(f"Error processing with LLM: {str(e)}")
        return None

# ... rest of the code remains the same ... 